accidents$uniquetype <- paste(accidents$TRUCK_ACCIDENT, accidents$STATE_HWY_IND, sep="")
library(sqldf)
accidents <- sqldf("select ACCIDENT_YEAR, TRUCK_ACCIDENT, STATE_HWY_IND, sum(ct) as ct, uniquetype from accidents group by uniquetype, ACCIDENT_YEAR")
acc_simple <- accidents
acc_simple$TRUCK_ACCIDENT <- NULL
acc_simple$STATE_HWY_IND <- NULL
colnames(accidents)[4] <- "COUNTY_CODE"
acc_simple <- spread(accidents, TRUCK_ACCIDENT, ct)
acc_simple$truckshare <- acc_simple$Y / (acc_simple$Y + acc_simple$N) * 100
colnames(acc_simple)[2] <- "COUNTY_CODE"
cnty_codes <- read_csv("~/Github/kpcc-data-team/data/california-gun-sales/data/cnty_codes.csv")
all_cnty_trux_acc <- merge(acc_simple, cnty_codes, by = "COUNTY_CODE")
trucks_simple <- select(all_cnty_trux_acc, ACCIDENT_YEAR, name, truckshare)
colnames(trucks_simple) <- c("year", "category", "n")
accidents <- read.csv("~/Desktop/projects/truck_accidents/collisions_all_counties.csv", stringsAsFactors=FALSE)
accidents$TRUCK_ACCIDENT <- ifelse(accidents$TRUCK_ACCIDENT == "", "N", accidents$TRUCK_ACCIDENT)
#(assuming blank means no here, seems safe in that its not being affirimitvely flagged as yes)
accidents$STATE_HWY_IND <- ifelse(accidents$STATE_HWY_IND == "", "N", accidents$STATE_HWY_IND)
accidents$STATE_HWY_IND <- ifelse(accidents$STATE_HWY_IND == "", "N", accidents$STATE_HWY_IND)
View(accidents)
library(sqldf)
accidents <- sqldf("select ACCIDENT_YEAR, TRUCK_ACCIDENT, STATE_HWY_IND, sum(ct) as ct, uniquetype from accidents group by uniquetype, ACCIDENT_YEAR")
acc_simple <- accidents
acc_simple$TRUCK_ACCIDENT <- NULL
acc_simple$STATE_HWY_IND <- NULL
colnames(accidents)[4] <- "COUNTY_CODE"
acc_simple <- spread(accidents, TRUCK_ACCIDENT, ct)
acc_simple$truckshare <- acc_simple$Y / (acc_simple$Y + acc_simple$N) * 100
colnames(acc_simple)[2] <- "COUNTY_CODE"
cnty_codes <- read_csv("~/Github/kpcc-data-team/data/california-gun-sales/data/cnty_codes.csv")
all_cnty_trux_acc <- merge(acc_simple, cnty_codes, by = "COUNTY_CODE")
trucks_simple <- select(all_cnty_trux_acc, ACCIDENT_YEAR, name, truckshare)
library(tidyr)
acc_simple <- spread(accidents, TRUCK_ACCIDENT, ct)
acc_simple$truckshare <- acc_simple$Y / (acc_simple$Y + acc_simple$N) * 100
colnames(acc_simple)[2] <- "COUNTY_CODE"
cnty_codes <- read_csv("~/Github/kpcc-data-team/data/california-gun-sales/data/cnty_codes.csv")
all_cnty_trux_acc <- merge(acc_simple, cnty_codes, by = "COUNTY_CODE")
trucks_simple <- select(all_cnty_trux_acc, ACCIDENT_YEAR, name, truckshare)
colnames(trucks_simple) <- c("year", "category", "n")
accidents <- read.csv("~/Desktop/projects/truck_accidents/collisions_all_counties.csv", stringsAsFactors=FALSE)
accidents$TRUCK_ACCIDENT <- ifelse(accidents$TRUCK_ACCIDENT == "", "N", accidents$TRUCK_ACCIDENT)
#(assuming blank means no here, seems safe in that its not being affirimitvely flagged as yes)
#accidents$STATE_HWY_IND <- ifelse(accidents$STATE_HWY_IND == "", "N", accidents$STATE_HWY_IND)
#accidents$uniquetype <- paste(accidents$TRUCK_ACCIDENT, accidents$STATE_HWY_IND, sep="")
library(sqldf)
accidents <- sqldf("select ACCIDENT_YEAR, TRUCK_ACCIDENT, STATE_HWY_IND, sum(ct) as ct, uniquetype from accidents group by uniquetype, ACCIDENT_YEAR")
acc_simple <- accidents
acc_simple$TRUCK_ACCIDENT <- NULL
acc_simple$STATE_HWY_IND <- NULL
colnames(accidents)[4] <- "COUNTY_CODE"
library(tidyr)
acc_simple <- spread(accidents, TRUCK_ACCIDENT, ct)
accidents <- sqldf("select ACCIDENT_YEAR, TRUCK_ACCIDENT, sum(ct) as ct, uniquetype from accidents group by uniquetype, ACCIDENT_YEAR")
acc_simple <- accidents
acc_simple$TRUCK_ACCIDENT <- NULL
acc_simple$STATE_HWY_IND <- NULL
colnames(accidents)[4] <- "COUNTY_CODE"
library(tidyr)
acc_simple <- spread(accidents, TRUCK_ACCIDENT, ct)
View(acc_simple)
View(accidents)
accidents <- read.csv("~/Desktop/projects/truck_accidents/collisions_all_counties.csv", stringsAsFactors=FALSE)
accidents$TRUCK_ACCIDENT <- ifelse(accidents$TRUCK_ACCIDENT == "", "N", accidents$TRUCK_ACCIDENT)
accidents <- sqldf("select ACCIDENT_YEAR, countycode, sum(COUNTY_CODE) as ct, uniquetype from accidents group by uniquetype, ACCIDENT_YEAR")
acc_simple <- accidents
View(acc_simple)
View(accidents)
accidents <- sqldf("select ACCIDENT_YEAR, countycode, sum(COUNTY_CODE) as ct, uniquetype from accidents group by uniquetype, ACCIDENT_YEAR")
acc_simple <- accidents
acc_simple$TRUCK_ACCIDENT <- NULL
acc_simple$STATE_HWY_IND <- NULL
colnames(accidents)[4] <- "ct"
View(accidents)
library(tidyr)
acc_simple <- spread(accidents, TRUCK_ACCIDENT, ct)
acc_simple$truckshare <- acc_simple$Y / (acc_simple$Y + acc_simple$N) * 100
colnames(acc_simple)[2] <- "COUNTY_CODE"
cnty_codes <- read_csv("~/Github/kpcc-data-team/data/california-gun-sales/data/cnty_codes.csv")
all_cnty_trux_acc <- merge(acc_simple, cnty_codes, by = "COUNTY_CODE")
trucks_simple <- select(all_cnty_trux_acc, ACCIDENT_YEAR, name, truckshare)
colnames(trucks_simple) <- c("year", "category", "n")
library(readr)
library(tidyr)
acc_simple <- spread(accidents, TRUCK_ACCIDENT, ct)
acc_simple$truckshare <- acc_simple$Y / (acc_simple$Y + acc_simple$N) * 100
colnames(acc_simple)[2] <- "COUNTY_CODE"
cnty_codes <- read_csv("~/Github/kpcc-data-team/data/california-gun-sales/data/cnty_codes.csv")
all_cnty_trux_acc <- merge(acc_simple, cnty_codes, by = "COUNTY_CODE")
trucks_simple <- select(all_cnty_trux_acc, ACCIDENT_YEAR, name, truckshare)
colnames(trucks_simple) <- c("year", "category", "n")
accidents <- read.csv("~/Desktop/projects/truck_accidents/collisions_all_counties.csv", stringsAsFactors=FALSE)
accidents$TRUCK_ACCIDENT <- ifelse(accidents$TRUCK_ACCIDENT == "", "N", accidents$TRUCK_ACCIDENT)
#(assuming blank means no here, seems safe in that its not being affirimitvely flagged as yes)
#accidents$STATE_HWY_IND <- ifelse(accidents$STATE_HWY_IND == "", "N", accidents$STATE_HWY_IND)
#accidents$uniquetype <- paste(accidents$TRUCK_ACCIDENT, accidents$STATE_HWY_IND, sep="")
library(sqldf)
accidents <- sqldf("select ACCIDENT_YEAR, countycode, sum(COUNTY_CODE) as ct, uniquetype from accidents group by uniquetype, ACCIDENT_YEAR")
acc_simple <- accidents
acc_simple$TRUCK_ACCIDENT <- NULL
acc_simple$STATE_HWY_IND <- NULL
colnames(accidents)[4] <- "ct"
library(readr)
library(tidyr)
library(dplyr)
acc_simple <- spread(accidents, TRUCK_ACCIDENT, ct)
acc_simple$truckshare <- acc_simple$Y / (acc_simple$Y + acc_simple$N) * 100
colnames(acc_simple)[2] <- "COUNTY_CODE"
cnty_codes <- read_csv("~/Github/kpcc-data-team/data/california-gun-sales/data/cnty_codes.csv")
all_cnty_trux_acc <- merge(acc_simple, cnty_codes, by = "COUNTY_CODE")
trucks_simple <- select(all_cnty_trux_acc, ACCIDENT_YEAR, name, truckshare)
colnames(trucks_simple) <- c("year", "category", "n")
View(trucks_simple)
View(acc_simple)
library(readr)
crimes_data_2006_2015 <- read_csv("~/Downloads/crimes_data_2006-2015.csv")
View(crimes_data_2006_2015)
sb <- subset(crimes_data_2006_2015, crimes_data_2006_2015$County == "San Bernardino" & crimes_data_2006_2015$Year >= 2010)
sb <- subset(crimes_data_2006_2015, crimes_data_2006_2015$County == "San Bernardino")
sb <- subset(crimes_data_2006_2015, crimes_data_2006_2015$County == "San Bernardino County" & crimes_data_2006_2015$Year >= 2010)
View(sb)
str(sb)
sb_sm <- select(sb, Year, County, NCICCode, VehicleTheft_sum, VehicleTheftClr_sum)
library('dplyr')
sb_sm <- select(sb, Year, County, NCICCode, VehicleTheft_sum, VehicleTheftClr_sum)
View(sb_sm)
library(ggplot2)
ggplot(data=sb_sm, aes(x=Year, y=VehicleTheft_sum)) + geom_line() + facet_wrap(~ NCICCode)
sqldf("select NCICCode, sum(VehicleTheft_sum) as veh_theft, sum(VehicleTheftClr_sum) as veh_theft_clr from sb_sm group by NCICCode")
library(sqldf)
sqldf("select NCICCode, sum(VehicleTheft_sum) as veh_theft, sum(VehicleTheftClr_sum) as veh_theft_clr from sb_sm group by NCICCode")
sb_since2010 <- sqldf("select NCICCode, sum(VehicleTheft_sum) as veh_theft, sum(VehicleTheftClr_sum) as veh_theft_clr from sb_sm group by NCICCode")
View(sb_sm)
View(sb_since2010)
sb_since2010$clr_rate <- sb_since2010$veh_theft_clr / sb_since2010$veh_theft * 100
acs_pop <- read_csv("~/Desktop/projects/gunsales_2016/other_data/ACS_15_5YR_B01003/acs_pop.csv")
citydf <- colsplit(acs_pop$geog, 'CDP', c("city", "census_stuff"))
citydf <- colsplit(citydf$city, 'city', c("city", "census_stuff"))
citydf <- colsplit(citydf$city, 'town', c("city", "census_stuff"))
acs_pop <- cbind(acs_pop, citydf)
acs_pop <- select(acs_pop, city, pop)
acs_pop$city <- sapply(acs_pop$city, toupper)
trim.trailing <- function (x) sub("\\s+$", "", x)
acs_pop$city <- trim.trailing(acs_pop$city)
acs_pop <- read_csv("~/Desktop/projects/_inactive/gunsales_2016/other_data/ACS_15_5YR_B01003/acs_pop.csv")
citydf <- colsplit(acs_pop$geog, 'CDP', c("city", "census_stuff"))
citydf <- colsplit(citydf$city, 'city', c("city", "census_stuff"))
citydf <- colsplit(citydf$city, 'town', c("city", "census_stuff"))
acs_pop <- cbind(acs_pop, citydf)
acs_pop <- select(acs_pop, city, pop)
acs_pop$city <- sapply(acs_pop$city, toupper)
trim.trailing <- function (x) sub("\\s+$", "", x)
acs_pop$city <- trim.trailing(acs_pop$city)
library(reshape2)
acs_pop <- read_csv("~/Desktop/projects/_inactive/gunsales_2016/other_data/ACS_15_5YR_B01003/acs_pop.csv")
citydf <- colsplit(acs_pop$geog, 'CDP', c("city", "census_stuff"))
citydf <- colsplit(citydf$city, 'city', c("city", "census_stuff"))
citydf <- colsplit(citydf$city, 'town', c("city", "census_stuff"))
acs_pop <- cbind(acs_pop, citydf)
acs_pop <- select(acs_pop, city, pop)
acs_pop$city <- sapply(acs_pop$city, toupper)
trim.trailing <- function (x) sub("\\s+$", "", x)
acs_pop$city <- trim.trailing(acs_pop$city)
View(acs_pop)
library(reshape2)
acs_pop <- read_csv("~/Desktop/projects/_inactive/gunsales_2016/other_data/ACS_15_5YR_B01003/acs_pop.csv")
citydf <- colsplit(acs_pop$geog, 'CDP', c("city", "census_stuff"))
citydf <- colsplit(citydf$city, 'city', c("city", "census_stuff"))
citydf <- colsplit(citydf$city, 'town', c("city", "census_stuff"))
acs_pop <- cbind(acs_pop, citydf)
acs_pop <- select(acs_pop, city, pop)
trim.trailing <- function (x) sub("\\s+$", "", x)
acs_pop$city <- trim.trailing(acs_pop$city)
View(acs_pop)
colnames(sb_since2010)[2] <- "city"
merge(sb_since2010, acs_pop, by="city", all.x=TRUE)
colnames(sb_since2010)[2] <- "city"
merge(sb_since2010, acs_pop, by="city", all.x=TRUE)
sb_since2010 <- sqldf("select NCICCode, sum(VehicleTheft_sum) as veh_theft, sum(VehicleTheftClr_sum) as veh_theft_clr from sb_sm group by NCICCode")
colnames(sb_since2010)[1] <- "city"
merge(sb_since2010, acs_pop, by="city", all.x=TRUE)
View(sb_since2010)
View(sb_since2010)
View(sb_since2010)
View(sb_since2010)
sb_since2010 <- merge(sb_since2010, acs_pop, by="city", all.x=TRUE)
View(sb_since2010)
View(sb_since2010)
sb_since2010$veh_theft / sb_since2010$pop * 100000
sb_since2010$veh_theft / sb_since2010$pop * 1000
sb_since2010$veh_theft_rate <- sb_since2010$veh_theft / sb_since2010$pop * 1000
sb_since2010$clr_rate <- sb_since2010$veh_theft_clr / sb_since2010$veh_theft * 100
sum(sb_since2010$veh_theft)
sum(sb_since2010$veh_theft_clr) / sum(sb_since2010$veh_theft) *100
library(readr)
library(sqldf)
library(networkd3)
behest_mar13 <- read_csv("~/Desktop/projects/2017_elec/garcetti_trawl/behest_mar13.csv", col_types = cols(payment_amt = col_number()))
library(sqldf)
test <- sqldf("select payor_clean as source, payee_clean as target, sum(payment_amt) as value from behest_mar13 where official is 'Garcetti, Eric' group by payor_clean, payee_clean")
payor_appearances <- sqldf("select source, count(source) as ct from test group by source")
garcetti <- merge(test, payor_appearances, by="source", all.x=TRUE)
# big donors
garc <- subset(garcetti, value >= 50000 | ct > 1)
#small donors
sm_garc <- subset(garcetti, value < 50000 & ct == 1)
sm_garc$source <- "Smaller, single donors"
sm_garc <- sqldf("select source, target, sum(value) as value, ct from sm_garc group by source, target")
# add back
sm_garc_df <- rbind(garc, sm_garc)
sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 30)
#ok i think we need a separate df of numerical ids for 'sources' and 'targets' all together
# then also a df of source_id, target_id and value
ids <- sqldf("select source as name, sum(value) as sum from sm_garc_df group by source")
ids2 <- sqldf("select target as name, sum(value) as sum from sm_garc_df group by target")
ids <- rbind(ids, ids2)
ids2 <- NULL
ids <- sqldf("select name, sum from ids group by name order by sum desc")
ids$num <- 1:nrow(ids)
ids$num <- ids$num - 1
sm_garc_df <- sqldf("select source, target, value, i.num as source_id from sm_garc_df s join ids i on s.source = i.name")
sm_garc_df <- sqldf("select source, target, value, source_id, i.num as target_id from sm_garc_df s join ids i on s.target = i.name")
nodes <- ids$name
nodes<- as.data.frame(nodes)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1200, width = 1000)
library("networkD3", lib.loc="~/Library/R/3.3/library")
sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1200, width = 1000)
garc <- subset(garcetti, value >= 75000 | ct > 1)
#small donors
sm_garc <- subset(garcetti, value < 75000 & ct == 1)
sm_garc$source <- "Smaller, single donors"
sm_garc <- sqldf("select source, target, sum(value) as value, ct from sm_garc group by source, target")
# add back
sm_garc_df <- rbind(garc, sm_garc)
#ok i think we need a separate df of numerical ids for 'sources' and 'targets' all together
# then also a df of source_id, target_id and value
ids <- sqldf("select source as name, sum(value) as sum from sm_garc_df group by source")
ids2 <- sqldf("select target as name, sum(value) as sum from sm_garc_df group by target")
ids <- rbind(ids, ids2)
ids2 <- NULL
ids <- sqldf("select name, sum from ids group by name order by sum desc")
ids$num <- 1:nrow(ids)
ids$num <- ids$num - 1
sm_garc_df <- sqldf("select source, target, value, i.num as source_id from sm_garc_df s join ids i on s.source = i.name")
sm_garc_df <- sqldf("select source, target, value, source_id, i.num as target_id from sm_garc_df s join ids i on s.target = i.name")
nodes <- ids$name
nodes<- as.data.frame(nodes)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1200, width = 1000)
View(sm_garc_df)
garc <- subset(garcetti, value >= 100000 | ct > 1)
#small donors
sm_garc <- subset(garcetti, value < 100000 & ct == 1)
sm_garc$source <- "Smaller, single donors"
sm_garc <- sqldf("select source, target, sum(value) as value, ct from sm_garc group by source, target")
# add back
sm_garc_df <- rbind(garc, sm_garc)
#ok i think we need a separate df of numerical ids for 'sources' and 'targets' all together
# then also a df of source_id, target_id and value
ids <- sqldf("select source as name, sum(value) as sum from sm_garc_df group by source")
ids2 <- sqldf("select target as name, sum(value) as sum from sm_garc_df group by target")
ids <- rbind(ids, ids2)
ids2 <- NULL
ids <- sqldf("select name, sum from ids group by name order by sum desc")
ids$num <- 1:nrow(ids)
ids$num <- ids$num - 1
sm_garc_df <- sqldf("select source, target, value, i.num as source_id from sm_garc_df s join ids i on s.source = i.name")
sm_garc_df <- sqldf("select source, target, value, source_id, i.num as target_id from sm_garc_df s join ids i on s.target = i.name")
nodes <- ids$name
nodes<- as.data.frame(nodes)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1200, width = 1000)
View(sm_garc_df)
View(garcetti)
library(readr)
library(sqldf)
library(networkD3)
behest_mar13 <- read_csv("~/Desktop/projects/2017_elec/garcetti_trawl/behest_mar13.csv", col_types = cols(payment_amt = col_number()))
library(sqldf)
test <- sqldf("select payor_clean as source, payee_clean as target, sum(payment_amt) as value from behest_mar13 where official is 'Garcetti, Eric' group by payor_clean, payee_clean")
payor_appearances <- sqldf("select source, count(source) as ct from test group by source")
garcetti <- merge(test, payor_appearances, by="source", all.x=TRUE)
View(garcetti)
str(behest_mar13)
View(behest_mar13)
as.Date(behest_mar13$payment_amt)
as.Date(behest_mar13$payment_am, format = '%m/%d/%y')
as.Date(behest_mar13$payment_amt, format = '%m/%d/%y')
as.Date(behest_mar13$payment_date, format = '%m/%d/%y')
behest_mar13$payment_date <- as.Date(behest_mar13$payment_date, format = '%m/%d/%y')
subset(behest_mar13, payment_date > as.Date("2013-05-21"))
# THIS DATA HAD BEEN CLEANED IN REFINE
library(readr)
library(sqldf)
library(networkD3)
behest_mar13 <- read_csv("~/Desktop/projects/2017_elec/garcetti_trawl/behest_mar13.csv", col_types = cols(payment_amt = col_number()))
# lets filter for behests AFTER the 2013 election date
behest_mar13$payment_date <- as.Date(behest_mar13$payment_date, format = '%m/%d/%y')
behest_mar13 <- subset(behest_mar13, payment_date > as.Date("2013-05-21"))
library(sqldf)
test <- sqldf("select payor_clean as source, payee_clean as target, sum(payment_amt) as value from behest_mar13 where official is 'Garcetti, Eric' group by payor_clean, payee_clean")
payor_appearances <- sqldf("select source, count(source) as ct from test group by source")
garcetti <- merge(test, payor_appearances, by="source", all.x=TRUE)
# big donors, small donors. this is where u set threshold
# note that for those who gave to mult orgs, you keep them out of the grouping
# with 50k cutoff i get 118 rows. unwieldy.
# with 75k cutoff i get 104 rows.
# with 100k cutoff i get 101 rows.
garc <- subset(garcetti, value >= 100000 | ct > 1)
#small donors
sm_garc <- subset(garcetti, value < 100000 & ct == 1)
sm_garc$source <- "Smaller, single donors"
sm_garc <- sqldf("select source, target, sum(value) as value, ct from sm_garc group by source, target")
# add back
sm_garc_df <- rbind(garc, sm_garc)
#ok i think we need a separate df of numerical ids for 'sources' and 'targets' all together
# then also a df of source_id, target_id and value
ids <- sqldf("select source as name, sum(value) as sum from sm_garc_df group by source")
ids2 <- sqldf("select target as name, sum(value) as sum from sm_garc_df group by target")
ids <- rbind(ids, ids2)
ids2 <- NULL
ids <- sqldf("select name, sum from ids group by name order by sum desc")
ids$num <- 1:nrow(ids)
ids$num <- ids$num - 1
sm_garc_df <- sqldf("select source, target, value, i.num as source_id from sm_garc_df s join ids i on s.source = i.name")
sm_garc_df <- sqldf("select source, target, value, source_id, i.num as target_id from sm_garc_df s join ids i on s.target = i.name")
nodes <- ids$name
nodes<- as.data.frame(nodes)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1200, width = 1000)
garc <- subset(garcetti, value >= 50000 | ct > 1)
#small donors
sm_garc <- subset(garcetti, value < 50000 & ct == 1)
sm_garc$source <- "Smaller, single donors"
sm_garc <- sqldf("select source, target, sum(value) as value, ct from sm_garc group by source, target")
# add back
sm_garc_df <- rbind(garc, sm_garc)
#ok i think we need a separate df of numerical ids for 'sources' and 'targets' all together
# then also a df of source_id, target_id and value
ids <- sqldf("select source as name, sum(value) as sum from sm_garc_df group by source")
ids2 <- sqldf("select target as name, sum(value) as sum from sm_garc_df group by target")
ids <- rbind(ids, ids2)
ids2 <- NULL
ids <- sqldf("select name, sum from ids group by name order by sum desc")
ids$num <- 1:nrow(ids)
ids$num <- ids$num - 1
sm_garc_df <- sqldf("select source, target, value, i.num as source_id from sm_garc_df s join ids i on s.source = i.name")
sm_garc_df <- sqldf("select source, target, value, source_id, i.num as target_id from sm_garc_df s join ids i on s.target = i.name")
nodes <- ids$name
nodes<- as.data.frame(nodes)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1200, width = 1000)
View(sm_garc_df)
garc <- subset(garcetti, value >= 100000 | ct > 1)
#small donors
sm_garc <- subset(garcetti, value < 100000 & ct == 1)
sm_garc$source <- "Smaller, single donors"
sm_garc <- sqldf("select source, target, sum(value) as value, ct from sm_garc group by source, target")
# add back
sm_garc_df <- rbind(garc, sm_garc)
#ok i think we need a separate df of numerical ids for 'sources' and 'targets' all together
# then also a df of source_id, target_id and value
ids <- sqldf("select source as name, sum(value) as sum from sm_garc_df group by source")
ids2 <- sqldf("select target as name, sum(value) as sum from sm_garc_df group by target")
ids <- rbind(ids, ids2)
ids2 <- NULL
ids <- sqldf("select name, sum from ids group by name order by sum desc")
ids$num <- 1:nrow(ids)
ids$num <- ids$num - 1
sm_garc_df <- sqldf("select source, target, value, i.num as source_id from sm_garc_df s join ids i on s.source = i.name")
sm_garc_df <- sqldf("select source, target, value, source_id, i.num as target_id from sm_garc_df s join ids i on s.target = i.name")
nodes <- ids$name
nodes<- as.data.frame(nodes)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1200, width = 1000)
View(garcetti)
View(sm_garc_df)
garc <- subset(garcetti, value > 100000 | ct > 1)
#small donors
sm_garc <- subset(garcetti, value <= 100000 & ct == 1)
sm_garc$source <- "Smaller, single donors"
sm_garc <- sqldf("select source, target, sum(value) as value, ct from sm_garc group by source, target")
# add back
sm_garc_df <- rbind(garc, sm_garc)
#ok i think we need a separate df of numerical ids for 'sources' and 'targets' all together
# then also a df of source_id, target_id and value
ids <- sqldf("select source as name, sum(value) as sum from sm_garc_df group by source")
ids2 <- sqldf("select target as name, sum(value) as sum from sm_garc_df group by target")
ids <- rbind(ids, ids2)
ids2 <- NULL
ids <- sqldf("select name, sum from ids group by name order by sum desc")
ids$num <- 1:nrow(ids)
ids$num <- ids$num - 1
sm_garc_df <- sqldf("select source, target, value, i.num as source_id from sm_garc_df s join ids i on s.source = i.name")
sm_garc_df <- sqldf("select source, target, value, source_id, i.num as target_id from sm_garc_df s join ids i on s.target = i.name")
nodes <- ids$name
nodes<- as.data.frame(nodes)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1200, width = 1000)
garc <- subset(garcetti, value > 100000 | ct > 1)
#small donors
sm_garc <- subset(garcetti, value <= 100000 & ct == 1)
sm_garc$source <- "Smaller, single donors"
sm_garc <- sqldf("select source, target, sum(value) as value, ct from sm_garc group by source, target")
# add back
sm_garc_df <- rbind(garc, sm_garc)
#ok i think we need a separate df of numerical ids for 'sources' and 'targets' all together
# then also a df of source_id, target_id and value
ids <- sqldf("select source as name, sum(value) as sum from sm_garc_df group by source")
ids2 <- sqldf("select target as name, sum(value) as sum from sm_garc_df group by target")
ids <- rbind(ids, ids2)
ids2 <- NULL
ids <- sqldf("select name, sum from ids group by name order by sum desc")
ids$num <- 1:nrow(ids)
ids$num <- ids$num - 1
sm_garc_df <- sqldf("select source, target, value, i.num as source_id from sm_garc_df s join ids i on s.source = i.name")
sm_garc_df <- sqldf("select source, target, value, source_id, i.num as target_id from sm_garc_df s join ids i on s.target = i.name")
nodes <- ids$name
nodes<- as.data.frame(nodes)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 70, height = 1200, width = 800)
sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1000, width = 900)
saved_sankey <- sankeyNetwork(Links = sm_garc_df, Nodes = nodes, Source = "source_id",
Target = "target_id", Value = "value", NodeID = "nodes",
fontSize = 15, nodeWidth = 65, height = 1000, width = 900)
saveWidget(saved_sankey, "saved_sankey.html", selfcontained = FALSE, libdir = "src", background = "white")
?saveWidget
library(htmlwidgets)
saveWidget(saved_sankey, "saved_sankey.html", selfcontained = FALSE, libdir = "src", background = "white")
library(readr)
incidents <- read_csv("~/Desktop/projects/ois_san_bernardino/data_FORFACTCHECK/ois_incidents_bak0327.csv")
people <- read_csv("~/Desktop/projects/ois_san_bernardino/data_FORFACTCHECK/ois_people_bak0327.csv")
library(sqldf)
ois <- sqldf("select * from people p left join incidents i on p.district_attorney_file_number = i.district_attorney_file_number")
# ois <- people[, !duplicated(colnames(ois))]
ois <- subset(ois, ois$district_attorney_county == "San Bernardino")
# q1
ois$date_of_incident <- as.POSIXct(ois$date_of_incident)
View(ois)
sqldf("select officer_police_agency, count(officer_police_agency), person_signs_of_impairment from ois group by person_signs_of_impairment, officer_police_agency")
agency_drugs <- sqldf("select officer_police_agency, count(officer_police_agency), person_signs_of_impairment from ois group by person_signs_of_impairment, officer_police_agency")
View(agency_drugs)
agency_drugs <- sqldf("select officer_police_agency, count(officer_police_agency) as ct, person_signs_of_impairment from ois group by person_signs_of_impairment, officer_police_agency")
agency_drugs <- sqldf("select officer_police_agency, person_signs_of_impairment, count(officer_police_agency) as ct from ois group by person_signs_of_impairment, officer_police_agency")
agency_drugs_wide <- spread(agency_drugs, person_signs_of_impairment, ct)
library(tidyr)
agency_drugs_wide <- spread(agency_drugs, person_signs_of_impairment, ct)
View(agency_drugs_wide)
write.csv(agency_drugs_wide, "~/Downloads/agency_drugs.csv")
library(readr)
incidents <- read_csv("~/Desktop/projects/ois_san_bernardino/data_FORFACTCHECK/ois_incidents_bak0327.csv")
people <- read_csv("~/Desktop/projects/ois_san_bernardino/data_FORFACTCHECK/ois_people_bak0327.csv")
library(sqldf)
ois <- sqldf("select * from people p left join incidents i on p.district_attorney_file_number = i.district_attorney_file_number")
# ois <- people[, !duplicated(colnames(ois))]
ois <- subset(ois, ois$district_attorney_county == "San Bernardino")
# q1
ois$date_of_incident <- as.POSIXct(ois$date_of_incident)
View(ois)
sum(ois$marijuana_alone)
rainfall <- read.table("http://cirrus.ucsd.edu/~pierce/kpbs/make_indices_v6.LA_basin.365.out.cumul.txt",header=FALSE, sep="", na.strings="NA", dec=".", strip.white=TRUE, stringsAsFactors = FALSE)
# Rename all the columns at once
colnames(rainfall) <- c("water_year", "day_of_water_year", "calendar_date", "pct_of_normal_total", "record_low_value", "date_of_record_low", "typical_low_value_for_this_day", "median_value_for_this_day", "typical_high_value_for_this_day", "record_high_value_for_this_day", "date_of_record_hi", "string_day_one", "current_one_day_chng", "fiftieth_percentile_for_one_day_chng", "ninetieth_percentile_for_one_day_chng", "ninety_fifth_percentile_for_one_day_chng", "ninety_ninth_percentile_for_one_day_chng", "record_hi_one_day_chng", "record_hi_one_day_chng_date", "string_day_two", "current_two_day_chng", "fiftieth_percentile_for_two_day_chng", "ninetieth_percentile_for_two_day_chng", "ninety_fifth_percentile_for_two_day_chng", "ninety_ninth_percentile_for_two_day_chng", "record_hi_two_day_chng", "record_hi_two_day_chng_date", "string_day_three", "current_three_day_chng", "fiftieth_percentile_for_three_day_chng", "ninetieth_percentile_for_three_day_chng", "ninety_fifth_percentile_for_three_day_chng", "ninety_ninth_percentile_for_three_day_chng", "record_hi_three_day_chng", "record_hi_three_day_chng_date")
View(rainfall)
subset(rainfall, rainfall$day_of_water_year == 182)
last_day_of_water_yr <- subset(rainfall, rainfall$day_of_water_year == 182)
View(last_day_of_water_yr)
write.csv(day_of_water_yr,"~/Downloads/day_of_water_year.csv")
write.csv(last_day_of_water_yr,"~/Downloads/day_of_water_year.csv")
setwd("~/Github/kpcc-data-team/data/daily-hi-temps/")
# date
todaysdate <- Sys.Date()
# historical temps
library(readr)
library('dplyr')
dtla_daily_hi <- read_csv("~/Github/kpcc-data-team/data/daily-hi-temps/dtla_daily_hi.csv")
dtla_daily_hi$date <- paste(dtla_daily_hi$MO, dtla_daily_hi$`N DY`, sep="-")
dtla_daily_hi$date <- as.Date(dtla_daily_hi$date, format = '%m-%d')
today <- subset(dtla_daily_hi, date == todaysdate)
statement <- paste("DTLA's average high temperature on ", gsub(" 0", " ", format(todaysdate, format="%B %d")), " is ", today$TMAX, " degrees ☀️", sep="")
install.packages("twitteR")
require(twitteR)
# dont post this
consumer_key <- "eZ4U7qdRgqatmblFLhDyFCtzr"
consumer_secret <- "DaiuHqoVObjwo4Ux31edEN7Hc3QSYGRcHXglP7IT65zPoMeiqG"
access_token <- "848254455271243776-FudbQQOEmtxvthGfxSI9VQEA444fRgZ"
access_secret <- "aCXgtBDcQMMR5kIrr2jXxC217gpFrIdGGfhxER4V5j5Xz"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
1
updateStatus(statement)
updateStatus(statement)
U+2600
dtla_daily_hi <- read_csv("https://s3-us-west-1.amazonaws.com/scpr-projects/dtladailyhigh/dtla_daily_hi.csv")
View(dtla_daily_hi)
